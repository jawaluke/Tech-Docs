
Typescript :
	
	- Typescript is a object oriented, strong typed and compiled langauage.
	- it is a javascript with added syntax for types.
	- it is a syntactical superset of javascript which add static typing.

	- Typescript is a statically type langage, which means types are checked at compile time and throw error if any type mismatch.

	- the feature of Object oriented, strong type check and compile time error check prevent javascript as full fleged server side enterprise application.
	  typescript is used to bridge the gap.


tsconfig.json - it is a JSON config file for customizing how TypeScript behaves.


Typescript Transpiler/ Typescript Compiler / tsc:

	- it is a tool which convert typescript to a plain javascript code that run on any browser or environment where javascript run..

	- typescript compiler can take a typescript file or a project with tsconfig.json file and generate a javascript file that follow 	specified compiler options such as target version on javascript, the module system.
	
	- it is command line tool can installed using npm the nodeJs package manager.

	- The TypeScript transpiler can also be integrated with various code editors, such as Visual Studio Code



Installing Typescript Compiler:

	Within your npm project, run the following command to install the compiler:

		npm install typescript --save-dev
	Which should give you an output similar to:

		added 1 package, and audited 2 packages in 2s
		found 0 vulnerabilities
	The compiler is installed in the node_modules directory and can be run with: npx tsc.

		npx tsc
	Which should give you an output similar to:

		Version 4.5.5
		tsc: The TypeScript Compiler - Version 4.5.5




Typescript simple types: 


	before that diff, primitive and non-primitive data type:
		primitive - pre-defined by programming language like size and type of variable values are specified i.e.. no additional method
		non- primitive - not defined by programming language but created by programmer


	- simple primitive type in typescript and javascript
		number, boolean, string
		bigInt, symbols - latest primitive types

	Type Assignment:
		-- simple word: Assigning a type to a variable.
		-- it is a process of specifying or inferring  the type of variable, function parameter and function return type.
		-- Typescript is strongly typed language means types are checked at compile time and error thrown if any type mismatch happen.

		two ways to assign a type to a variable
		- Typescript support both implicit and explicit, as well as union types and type assertions,

			1) Implicit --> assign a value to a variable and let the typescript to guess the type based on value.
					it is also called as infer.
 
				eg: sub = "Maths"

			2) Explicit --> assign a type to a variable and it is more readable..
				eg: sub: string = "Maths"


			3) Union Type --> using pipe (|) symbol or vertical bar to assign a multiple types to a variable.
					-- it is a ways to declare a variable  or function that returns one of several types.
				limitation : you can only access the members that are common to all types in the union.
					
				eg: sub : string | number;  --> result can be either string or number.
				disadvantage: type casting (as) won't be possible only for (unknown) it is possible.
				

			4) Type Assertion --> it uses angle bracket (<>) syntax or 'as' keyword to explicitly specify a type of a value.
				eg: sub: unknown = 23
				    n: number = sub // it will throw error eventhough the type of value is number, will says unknown not number
				    n: number = (sub as number) // will work
				eg:
				    sub: unknown = 23
				    n: number = <number> sub // will work


		Type Guard:
			- it is a way to check the type of variable or a value and narrow it down the type within specific scope.

			eg: - if we have variable that can either string or number we can use type guard to determine the type and access properties based on it.

			Diff. ways to use type guards.

				1) instanceof keyword : built-in typescript type guard.
							used to check the value is an instance of given class or constructor function.
							returns a boolean. 
							used to test the value/object is derived from the class.

					<ObjectVariable> instanceof <ClassName>
					dog instanceof Dog

	
				2) typeof keyword :  typeguard in typescript.
						     used to determine the type of the variable's value.
						     return the type of value.
						     it is very limited and shallow because it support only below types.
							1) number
							2) boolean
							3) string
							4) undefined
							5) bigint
							6) symbol
							7) function
									
						     Other than that it will always return as object.
			
					typeof <variable>
					typeof 'hello' or typeof age

				3) in keyword.

		Type Predicate:
			-eg: test is string (type predicate) is used in compile-time to tell the developers the code will have a chance to have a runtime error. For javascript, the developers will not KNOW the error in compile time. This is the advantage of using TypeScript.


Typescript Special Types:

	any - Disable type checking and allow all types to be used.
		-- compiler directives
		-- will not provide type safety.
	
		When to use: 
	
	eg: 
	     0) var age: any =23;
		age= true  // we can re assign different type / value

		var ages: number = age;  // no matter what type other variable is we can still assign any variable
		console.log("age is ",ages) // will print age is  true 


	     1)	name: any = 123
		name = "jawahar"
		
		addNo(a: nuwmber) {
			return a+10;
		}
		addNo(name) // it will print "jawahar10" with no error 


	     2) var names: any;
		names = {
		  "name" : "juice",
		  "age" : 23
		}
		console.log("name = ",names.lig," Type: ",typeof names);
		// runtime return names.lig = undefined


	unknown - will provide type safety
		-- cannot access any properties/method of a value of type unknown
		-- safer alternate to any
		--
	
		when to use: unknown is best used when you don't know the type of data being typed. To add a type later you'll need to cast it.

	eg: 
	     0) var age: unknown =23;
		age= true // we can re assign different value but not type 

		var ages: number = age; // Throw Error Type 'unknown' is not assignable to type 'number'
		console.log("age is ",ages)


	     1) var names: unknown = 123;
		names = "jawahar";
		
		function addNo(a: number) {
			return a+10;
		}
		addNo(names as number) // it will print "jawahar10" with no error because we cast it to number
		addNo(names) // compile error shows type 'unknown' is not assignable to of type 'number'

	NaN - not an number
	    - Special value in Js/ Ts.
	    - placeholder for missing numerical value
	    - signifies an error
	    - represent an undefined or un representable value resulted from arithmetic operation.

	    Fact: 
		condition NaN === NaN --> always false (for other operator too <=,>,>=)
			  isNaN(NaN) --> true
			  Number.isNaN(NaN) --> true
			  NaN ** 0 --> 1
			   
	    eg:
		parseInt("34") --> 34
		parseInt("hello") --> NaN
	
	undefined  - special value in typescript
		   - represent absence of meaningful value.
	           - variable been declared but not assigned a value.
		type : typeof undefined ---> undefined

	    eg: 
		var no: number;
		no ---> // throw error no used before it assigned.
		var no;
		no ---> undefined
		var no = [2,3,4,5]
		no[12] --> undefined
		var no = {a:"A"}
		(no as {a: string, b: string}).b --> undefined

	null - special value in typescript.

		












Work pratices:

// Type Example
function getIndex(index: number, arr: (string | number | boolean | object)[]): string|number|boolean| object {
    return arr[index];
}


console.log(getIndex(2,["hello","hi","morning","star"]))
console.log(getIndex(2,[2,4,6,8,0]))
console.log(getIndex(2,[true, false, true, false]))
console.log(getIndex(2,[{name: "jaw"}, {name: "fie"}, {name: "ram"}]))

// Genric Example

function getIndexs<Type>(index: number, arr: Type[]): Type {
    return arr[index];
}


console.log(getIndexs(2,["hello","hi","morning","star"]))
console.log(getIndexs(2,[2,4,6,8,0]))
console.log(getIndexs(2,[true, false, true, false]))
console.log(getIndexs(2,[{name: "jaw"}, {name: "fie"}, {name: "ram"}]))




var age: unknown;
age = "23"
console.log("value :",age," type: ",typeof age)

function addAgewithTen(age: number): number {
    console.log("value :",age," type: ",typeof age)
    if( typeof age == 'number' && !isNaN(age)) {
        return age + 10;
    }
    if( typeof age == 'string' && !isNaN(age)) {
        return addAgewithTen(parseInt(age))
    }
    throw new Error("not a valid value")
}

var ans = addAgewithTen(age as number);

console.log(ans)

